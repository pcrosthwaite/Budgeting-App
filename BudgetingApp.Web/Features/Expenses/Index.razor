@page "/expenses"
@using BudgetingApp.Data
@using BudgetingApp.Data.Services
@using BudgetingApp.Web.Shared
@using MudBlazor
@inject BudgetService BudgetService
@inject IMediator Mediator
@inject IDialogService DialogService

@if (Model != null)
{
    <MudContainer>
        <div class="row">
            <div class="col-md-12 mb-3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(null)">Add Expense</MudButton>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mb-3">
                <MudDataGrid Items="@Model.Expenses" Hover="true" Bordered="true" Striped="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <PropertyColumn Property="x => x.CategoryName" Title="Category" />
                        <PropertyColumn Property="x => x.Cost" Title="Cost" Format="C" />
                        <PropertyColumn Property="x => x.Frequency.GetDescription()" Title="Frequency" />
                        <PropertyColumn Property="x => x.IncludeInBillsAccount" Title="Include in Bills" />
                        <PropertyColumn Property="x => x.IsSubscription" Title="Subscription" />
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenEditDialog(context.Item.ExpenseId))">Edit</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => OpenDeleteDialog(context.Item.ExpenseId))">Delete</MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
                @* <MudTable Items="@Model.Expenses" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>Cost</MudTh>
                        <MudTh>Frequency</MudTh>
                        <MudTh>Include in Bills</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Name">@context.CategoryName</MudTd>
                        <MudTd DataLabel="Cost">@context.Cost</MudTd>
                        <MudTd DataLabel="Frequency">@context.Frequency</MudTd>
                        <MudTd DataLabel="Include in Bills">@context.IncludeInBillsAccount</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(context.ExpenseId)">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => OpenDeleteDialog(context.ExpenseId)">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable> *@
            </div>
        </div>
    </MudContainer>
}
@code {
    private IndexQuery Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Mediator.Send(new IndexQuery());
    }

    private async Task OpenEditDialog(int? expenseId)
    {
        var parameters = new DialogParameters { ["ExpenseId"] = expenseId };
        var dialog = await DialogService.ShowAsync<Editor>("Edit Expense", parameters, new DialogOptions(){ Position = DialogPosition.Center, MaxWidth = MaxWidth.Medium, FullWidth = true});
        var result = await dialog.Result;

        if (!result?.Canceled ?? true)
        {
            await OnInitializedAsync();
        }
    }

    private async Task OpenDeleteDialog(int expenseId)
    {
        var parameters = new DialogParameters { ["Content"] = "Are you sure you want to delete this expense?" };
        var dialog = await DialogService.ShowAsync<Confirm>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            await Mediator.Send(new DeleteCommand { ExpenseId = expenseId });
            await OnInitializedAsync();
        }
    }
}