@page "/persons"
@using BudgetingApp.Data.Models
@using MudBlazor
@using BudgetingApp.Web.Shared
@inject IMediator Mediator
@inject IDialogService DialogService

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(null)">Add Person</MudButton>

    <MudTable Items="@Model.Persons" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(context.PersonId)">Edit</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => OpenDeleteDialog(context.PersonId)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private IndexQuery Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Model = await Mediator.Send(new IndexQuery());
    }

    private async Task OpenEditDialog(int? personId)
    {
        var parameters = new DialogParameters { ["PersonId"] = personId };
        var dialog = await DialogService.ShowAsync<Editor>("Edit Person", parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? true)
        {
            await OnInitializedAsync();
        }
    }

    private async Task OpenDeleteDialog(int personId)
    {
        var parameters = new DialogParameters { ["Content"] = "Are you sure you want to delete this person?" };
        var dialog = await DialogService.ShowAsync<Confirm>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            await Mediator.Send(new DeleteCommand { PersonId = personId });
            await OnInitializedAsync();
        }
    }
}